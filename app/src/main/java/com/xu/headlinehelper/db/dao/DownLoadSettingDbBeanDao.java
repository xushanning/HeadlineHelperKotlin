package com.xu.headlinehelper.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xu.headlinehelper.db.dbbean.DownLoadSettingDbBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_LOAD_SETTING_DB_BEAN".
*/
public class DownLoadSettingDbBeanDao extends AbstractDao<DownLoadSettingDbBean, Long> {

    public static final String TABLENAME = "DOWN_LOAD_SETTING_DB_BEAN";

    /**
     * Properties of entity DownLoadSettingDbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WifiDownLoad = new Property(1, boolean.class, "wifiDownLoad", false, "WIFI_DOWN_LOAD");
        public final static Property ShowNotify = new Property(2, boolean.class, "showNotify", false, "SHOW_NOTIFY");
        public final static Property Shock = new Property(3, boolean.class, "shock", false, "SHOCK");
        public final static Property DownLoadCount = new Property(4, int.class, "downLoadCount", false, "DOWN_LOAD_COUNT");
        public final static Property RetryCount = new Property(5, int.class, "retryCount", false, "RETRY_COUNT");
        public final static Property SavePath = new Property(6, String.class, "savePath", false, "SAVE_PATH");
    }


    public DownLoadSettingDbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadSettingDbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_LOAD_SETTING_DB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WIFI_DOWN_LOAD\" INTEGER NOT NULL ," + // 1: wifiDownLoad
                "\"SHOW_NOTIFY\" INTEGER NOT NULL ," + // 2: showNotify
                "\"SHOCK\" INTEGER NOT NULL ," + // 3: shock
                "\"DOWN_LOAD_COUNT\" INTEGER NOT NULL ," + // 4: downLoadCount
                "\"RETRY_COUNT\" INTEGER NOT NULL ," + // 5: retryCount
                "\"SAVE_PATH\" TEXT);"); // 6: savePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_LOAD_SETTING_DB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoadSettingDbBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWifiDownLoad() ? 1L: 0L);
        stmt.bindLong(3, entity.getShowNotify() ? 1L: 0L);
        stmt.bindLong(4, entity.getShock() ? 1L: 0L);
        stmt.bindLong(5, entity.getDownLoadCount());
        stmt.bindLong(6, entity.getRetryCount());
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(7, savePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoadSettingDbBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWifiDownLoad() ? 1L: 0L);
        stmt.bindLong(3, entity.getShowNotify() ? 1L: 0L);
        stmt.bindLong(4, entity.getShock() ? 1L: 0L);
        stmt.bindLong(5, entity.getDownLoadCount());
        stmt.bindLong(6, entity.getRetryCount());
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(7, savePath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownLoadSettingDbBean readEntity(Cursor cursor, int offset) {
        DownLoadSettingDbBean entity = new DownLoadSettingDbBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // wifiDownLoad
            cursor.getShort(offset + 2) != 0, // showNotify
            cursor.getShort(offset + 3) != 0, // shock
            cursor.getInt(offset + 4), // downLoadCount
            cursor.getInt(offset + 5), // retryCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // savePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoadSettingDbBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWifiDownLoad(cursor.getShort(offset + 1) != 0);
        entity.setShowNotify(cursor.getShort(offset + 2) != 0);
        entity.setShock(cursor.getShort(offset + 3) != 0);
        entity.setDownLoadCount(cursor.getInt(offset + 4));
        entity.setRetryCount(cursor.getInt(offset + 5));
        entity.setSavePath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownLoadSettingDbBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownLoadSettingDbBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownLoadSettingDbBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
